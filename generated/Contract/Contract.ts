// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CEOSet extends ethereum.Event {
  get params(): CEOSet__Params {
    return new CEOSet__Params(this);
  }
}

export class CEOSet__Params {
  _event: CEOSet;

  constructor(event: CEOSet) {
    this._event = event;
  }

  get newCEO(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Delegated extends ethereum.Event {
  get params(): Delegated__Params {
    return new Delegated__Params(this);
  }
}

export class Delegated__Params {
  _event: Delegated;

  constructor(event: Delegated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get delegateAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get delegatePercent(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenOwner(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class IceLevelTransfer extends ethereum.Event {
  get params(): IceLevelTransfer__Params {
    return new IceLevelTransfer__Params(this);
  }
}

export class IceLevelTransfer__Params {
  _event: IceLevelTransfer;

  constructor(event: IceLevelTransfer) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InitialMinting extends ethereum.Event {
  get params(): InitialMinting__Params {
    return new InitialMinting__Params(this);
  }
}

export class InitialMinting__Params {
  _event: InitialMinting;

  constructor(event: InitialMinting) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get mintCount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LevelEdit extends ethereum.Event {
  get params(): LevelEdit__Params {
    return new LevelEdit__Params(this);
  }
}

export class LevelEdit__Params {
  _event: LevelEdit;

  constructor(event: LevelEdit) {
    this._event = event;
  }

  get level(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get dgCostAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get dgMoveAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get iceCostAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get iceMoveAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get isActive(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SupplyCheck extends ethereum.Event {
  get params(): SupplyCheck__Params {
    return new SupplyCheck__Params(this);
  }
}

export class SupplyCheck__Params {
  _event: SupplyCheck;

  constructor(event: SupplyCheck) {
    this._event = event;
  }

  get rarity(): string {
    return this._event.parameters[0].value.toString();
  }

  get maxSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get metadata(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get contentHash(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class UpgradeCancel extends ethereum.Event {
  get params(): UpgradeCancel__Params {
    return new UpgradeCancel__Params(this);
  }
}

export class UpgradeCancel__Params {
  _event: UpgradeCancel;

  constructor(event: UpgradeCancel) {
    this._event = event;
  }

  get tokenOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get upgradeIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpgradeRequest extends ethereum.Event {
  get params(): UpgradeRequest__Params {
    return new UpgradeRequest__Params(this);
  }
}

export class UpgradeRequest__Params {
  _event: UpgradeRequest;

  constructor(event: UpgradeRequest) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get issuedId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get requestIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class UpgradeResolved extends ethereum.Event {
  get params(): UpgradeResolved__Params {
    return new UpgradeResolved__Params(this);
  }
}

export class UpgradeResolved__Params {
  _event: UpgradeResolved;

  constructor(event: UpgradeResolved) {
    this._event = event;
  }

  get tokenOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get upgradeIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WorkerAdded extends ethereum.Event {
  get params(): WorkerAdded__Params {
    return new WorkerAdded__Params(this);
  }
}

export class WorkerAdded__Params {
  _event: WorkerAdded;

  constructor(event: WorkerAdded) {
    this._event = event;
  }

  get newWorker(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WorkerRemoved extends ethereum.Event {
  get params(): WorkerRemoved__Params {
    return new WorkerRemoved__Params(this);
  }
}

export class WorkerRemoved__Params {
  _event: WorkerRemoved;

  constructor(event: WorkerRemoved) {
    this._event = event;
  }

  get existingWorker(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract__delegateResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__levelsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class Contract__registrerResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__requestsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  allowChangeSaleLimit(): boolean {
    let result = super.call(
      "allowChangeSaleLimit",
      "allowChangeSaleLimit():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_allowChangeSaleLimit(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowChangeSaleLimit",
      "allowChangeSaleLimit():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canPurchaseAgain(_minterAddress: Address): boolean {
    let result = super.call(
      "canPurchaseAgain",
      "canPurchaseAgain(address):(bool)",
      [ethereum.Value.fromAddress(_minterAddress)]
    );

    return result[0].toBoolean();
  }

  try_canPurchaseAgain(_minterAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPurchaseAgain",
      "canPurchaseAgain(address):(bool)",
      [ethereum.Value.fromAddress(_minterAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ceoAddress(): Address {
    let result = super.call("ceoAddress", "ceoAddress():(address)", []);

    return result[0].toAddress();
  }

  try_ceoAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("ceoAddress", "ceoAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  delegate(param0: Address, param1: Bytes): Contract__delegateResult {
    let result = super.call(
      "delegate",
      "delegate(address,bytes32):(address,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return new Contract__delegateResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_delegate(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<Contract__delegateResult> {
    let result = super.tryCall(
      "delegate",
      "delegate(address,bytes32):(address,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__delegateResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  depositAddressDG(): Address {
    let result = super.call(
      "depositAddressDG",
      "depositAddressDG():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_depositAddressDG(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "depositAddressDG",
      "depositAddressDG():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositAddressNFT(): Address {
    let result = super.call(
      "depositAddressNFT",
      "depositAddressNFT():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_depositAddressNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "depositAddressNFT",
      "depositAddressNFT():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  frames(param0: Address): BigInt {
    let result = super.call("frames", "frames(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_frames(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("frames", "frames(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHash(_tokenAddress: Address, _tokenId: BigInt): Bytes {
    let result = super.call("getHash", "getHash(address,uint256):(bytes32)", [
      ethereum.Value.fromAddress(_tokenAddress),
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBytes();
  }

  try_getHash(
    _tokenAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getHash",
      "getHash(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getIceBonus(
    _tokenOwner: Address,
    _tokenAddress: Address,
    _tokenId: BigInt
  ): BigInt {
    let result = super.call(
      "getIceBonus",
      "getIceBonus(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenOwner),
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getIceBonus(
    _tokenOwner: Address,
    _tokenAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIceBonus",
      "getIceBonus(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenOwner),
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLevel(_tokenOwner: Address, _tokenHash: Bytes): BigInt {
    let result = super.call("getLevel", "getLevel(address,bytes32):(uint256)", [
      ethereum.Value.fromAddress(_tokenOwner),
      ethereum.Value.fromFixedBytes(_tokenHash)
    ]);

    return result[0].toBigInt();
  }

  try_getLevel(
    _tokenOwner: Address,
    _tokenHash: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLevel",
      "getLevel(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenOwner),
        ethereum.Value.fromFixedBytes(_tokenHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLevelById(
    _tokenOwner: Address,
    _tokenAddress: Address,
    _tokenId: BigInt
  ): BigInt {
    let result = super.call(
      "getLevelById",
      "getLevelById(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenOwner),
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLevelById(
    _tokenOwner: Address,
    _tokenAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLevelById",
      "getLevelById(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenOwner),
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNonce(_user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumber(
    _floorValue: BigInt,
    _deltaValue: BigInt,
    _nonceValue: BigInt,
    _randomValue: BigInt
  ): BigInt {
    let result = super.call(
      "getNumber",
      "getNumber(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_floorValue),
        ethereum.Value.fromUnsignedBigInt(_deltaValue),
        ethereum.Value.fromUnsignedBigInt(_nonceValue),
        ethereum.Value.fromUnsignedBigInt(_randomValue)
      ]
    );

    return result[0].toBigInt();
  }

  try_getNumber(
    _floorValue: BigInt,
    _deltaValue: BigInt,
    _nonceValue: BigInt,
    _randomValue: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumber",
      "getNumber(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_floorValue),
        ethereum.Value.fromUnsignedBigInt(_deltaValue),
        ethereum.Value.fromUnsignedBigInt(_nonceValue),
        ethereum.Value.fromUnsignedBigInt(_randomValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSupply(_itemId: BigInt, _accessoriesContract: Address): BigInt {
    let result = super.call(
      "getSupply",
      "getSupply(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_itemId),
        ethereum.Value.fromAddress(_accessoriesContract)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSupply(
    _itemId: BigInt,
    _accessoriesContract: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSupply",
      "getSupply(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_itemId),
        ethereum.Value.fromAddress(_accessoriesContract)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isIceEnabled(
    _tokenOwner: Address,
    _tokenAddress: Address,
    _tokenId: BigInt
  ): boolean {
    let result = super.call(
      "isIceEnabled",
      "isIceEnabled(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_tokenOwner),
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isIceEnabled(
    _tokenOwner: Address,
    _tokenAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isIceEnabled",
      "isIceEnabled(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_tokenOwner),
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWorker(param0: Address): boolean {
    let result = super.call("isWorker", "isWorker(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isWorker(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isWorker", "isWorker(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  levels(param0: BigInt): Contract__levelsResult {
    let result = super.call(
      "levels",
      "levels(uint256):(bool,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__levelsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_levels(param0: BigInt): ethereum.CallResult<Contract__levelsResult> {
    let result = super.tryCall(
      "levels",
      "levels(uint256):(bool,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__levelsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  limits(param0: BigInt): BigInt {
    let result = super.call("limits", "limits(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_limits(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("limits", "limits(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintingPrice(): BigInt {
    let result = super.call("mintingPrice", "mintingPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintingPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintingPrice", "mintingPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owners(param0: Bytes): Address {
    let result = super.call("owners", "owners(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_owners(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("owners", "owners(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentToken(): Address {
    let result = super.call("paymentToken", "paymentToken():(address)", []);

    return result[0].toAddress();
  }

  try_paymentToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("paymentToken", "paymentToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registrer(param0: Address, param1: Bytes): Contract__registrerResult {
    let result = super.call(
      "registrer",
      "registrer(address,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return new Contract__registrerResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_registrer(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<Contract__registrerResult> {
    let result = super.tryCall(
      "registrer",
      "registrer(address,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__registrerResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  requestUpgrade(_tokenAddress: Address, _tokenId: BigInt): BigInt {
    let result = super.call(
      "requestUpgrade",
      "requestUpgrade(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_requestUpgrade(
    _tokenAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestUpgrade",
      "requestUpgrade(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requests(param0: BigInt): Contract__requestsResult {
    let result = super.call(
      "requests",
      "requests(uint256):(uint256,uint256,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__requestsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress()
    );
  }

  try_requests(param0: BigInt): ethereum.CallResult<Contract__requestsResult> {
    let result = super.tryCall(
      "requests",
      "requests(uint256):(uint256,uint256,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__requestsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress()
      )
    );
  }

  saleCount(): BigInt {
    let result = super.call("saleCount", "saleCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("saleCount", "saleCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleFrame(): BigInt {
    let result = super.call("saleFrame", "saleFrame():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleFrame(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("saleFrame", "saleFrame():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleLimit(): BigInt {
    let result = super.call("saleLimit", "saleLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("saleLimit", "saleLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  targets(param0: Address): Address {
    let result = super.call("targets", "targets(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_targets(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("targets", "targets(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenAddressDG(): Address {
    let result = super.call("tokenAddressDG", "tokenAddressDG():(address)", []);

    return result[0].toAddress();
  }

  try_tokenAddressDG(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenAddressDG",
      "tokenAddressDG():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenAddressICE(): Address {
    let result = super.call(
      "tokenAddressICE",
      "tokenAddressICE():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tokenAddressICE(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenAddressICE",
      "tokenAddressICE():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upgradeCount(): BigInt {
    let result = super.call("upgradeCount", "upgradeCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_upgradeCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("upgradeCount", "upgradeCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  upgradeRequestCount(): BigInt {
    let result = super.call(
      "upgradeRequestCount",
      "upgradeRequestCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_upgradeRequestCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "upgradeRequestCount",
      "upgradeRequestCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _mintingPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _paymentToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenAddressDG(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokenAddressICE(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _accessoriesContract(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddWorkerCall extends ethereum.Call {
  get inputs(): AddWorkerCall__Inputs {
    return new AddWorkerCall__Inputs(this);
  }

  get outputs(): AddWorkerCall__Outputs {
    return new AddWorkerCall__Outputs(this);
  }
}

export class AddWorkerCall__Inputs {
  _call: AddWorkerCall;

  constructor(call: AddWorkerCall) {
    this._call = call;
  }

  get _newWorker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddWorkerCall__Outputs {
  _call: AddWorkerCall;

  constructor(call: AddWorkerCall) {
    this._call = call;
  }
}

export class AddWorkerBulkCall extends ethereum.Call {
  get inputs(): AddWorkerBulkCall__Inputs {
    return new AddWorkerBulkCall__Inputs(this);
  }

  get outputs(): AddWorkerBulkCall__Outputs {
    return new AddWorkerBulkCall__Outputs(this);
  }
}

export class AddWorkerBulkCall__Inputs {
  _call: AddWorkerBulkCall;

  constructor(call: AddWorkerBulkCall) {
    this._call = call;
  }

  get _newWorkers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddWorkerBulkCall__Outputs {
  _call: AddWorkerBulkCall;

  constructor(call: AddWorkerBulkCall) {
    this._call = call;
  }
}

export class AdjustDelegateEntryCall extends ethereum.Call {
  get inputs(): AdjustDelegateEntryCall__Inputs {
    return new AdjustDelegateEntryCall__Inputs(this);
  }

  get outputs(): AdjustDelegateEntryCall__Outputs {
    return new AdjustDelegateEntryCall__Outputs(this);
  }
}

export class AdjustDelegateEntryCall__Inputs {
  _call: AdjustDelegateEntryCall;

  constructor(call: AdjustDelegateEntryCall) {
    this._call = call;
  }

  get _tokenOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _delegateAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _delegatePercent(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AdjustDelegateEntryCall__Outputs {
  _call: AdjustDelegateEntryCall;

  constructor(call: AdjustDelegateEntryCall) {
    this._call = call;
  }
}

export class AdjustRegistrantEntryCall extends ethereum.Call {
  get inputs(): AdjustRegistrantEntryCall__Inputs {
    return new AdjustRegistrantEntryCall__Inputs(this);
  }

  get outputs(): AdjustRegistrantEntryCall__Outputs {
    return new AdjustRegistrantEntryCall__Outputs(this);
  }
}

export class AdjustRegistrantEntryCall__Inputs {
  _call: AdjustRegistrantEntryCall;

  constructor(call: AdjustRegistrantEntryCall) {
    this._call = call;
  }

  get _tokenOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _bonusValue(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _levelValue(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AdjustRegistrantEntryCall__Outputs {
  _call: AdjustRegistrantEntryCall;

  constructor(call: AdjustRegistrantEntryCall) {
    this._call = call;
  }
}

export class CancelUpgradeCall extends ethereum.Call {
  get inputs(): CancelUpgradeCall__Inputs {
    return new CancelUpgradeCall__Inputs(this);
  }

  get outputs(): CancelUpgradeCall__Outputs {
    return new CancelUpgradeCall__Outputs(this);
  }
}

export class CancelUpgradeCall__Inputs {
  _call: CancelUpgradeCall;

  constructor(call: CancelUpgradeCall) {
    this._call = call;
  }

  get _requestIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelUpgradeCall__Outputs {
  _call: CancelUpgradeCall;

  constructor(call: CancelUpgradeCall) {
    this._call = call;
  }
}

export class ChangeDepositAddressDGCall extends ethereum.Call {
  get inputs(): ChangeDepositAddressDGCall__Inputs {
    return new ChangeDepositAddressDGCall__Inputs(this);
  }

  get outputs(): ChangeDepositAddressDGCall__Outputs {
    return new ChangeDepositAddressDGCall__Outputs(this);
  }
}

export class ChangeDepositAddressDGCall__Inputs {
  _call: ChangeDepositAddressDGCall;

  constructor(call: ChangeDepositAddressDGCall) {
    this._call = call;
  }

  get _newDepositAddressDG(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeDepositAddressDGCall__Outputs {
  _call: ChangeDepositAddressDGCall;

  constructor(call: ChangeDepositAddressDGCall) {
    this._call = call;
  }
}

export class ChangeDepositAddressNFTCall extends ethereum.Call {
  get inputs(): ChangeDepositAddressNFTCall__Inputs {
    return new ChangeDepositAddressNFTCall__Inputs(this);
  }

  get outputs(): ChangeDepositAddressNFTCall__Outputs {
    return new ChangeDepositAddressNFTCall__Outputs(this);
  }
}

export class ChangeDepositAddressNFTCall__Inputs {
  _call: ChangeDepositAddressNFTCall;

  constructor(call: ChangeDepositAddressNFTCall) {
    this._call = call;
  }

  get _newDepositAddressNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeDepositAddressNFTCall__Outputs {
  _call: ChangeDepositAddressNFTCall;

  constructor(call: ChangeDepositAddressNFTCall) {
    this._call = call;
  }
}

export class ChangeMintLimitsCall extends ethereum.Call {
  get inputs(): ChangeMintLimitsCall__Inputs {
    return new ChangeMintLimitsCall__Inputs(this);
  }

  get outputs(): ChangeMintLimitsCall__Outputs {
    return new ChangeMintLimitsCall__Outputs(this);
  }
}

export class ChangeMintLimitsCall__Inputs {
  _call: ChangeMintLimitsCall;

  constructor(call: ChangeMintLimitsCall) {
    this._call = call;
  }

  get _itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeMintLimitsCall__Outputs {
  _call: ChangeMintLimitsCall;

  constructor(call: ChangeMintLimitsCall) {
    this._call = call;
  }
}

export class ChangeMintingPriceCall extends ethereum.Call {
  get inputs(): ChangeMintingPriceCall__Inputs {
    return new ChangeMintingPriceCall__Inputs(this);
  }

  get outputs(): ChangeMintingPriceCall__Outputs {
    return new ChangeMintingPriceCall__Outputs(this);
  }
}

export class ChangeMintingPriceCall__Inputs {
  _call: ChangeMintingPriceCall;

  constructor(call: ChangeMintingPriceCall) {
    this._call = call;
  }

  get _newMintingPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMintingPriceCall__Outputs {
  _call: ChangeMintingPriceCall;

  constructor(call: ChangeMintingPriceCall) {
    this._call = call;
  }
}

export class ChangePaymentTokenCall extends ethereum.Call {
  get inputs(): ChangePaymentTokenCall__Inputs {
    return new ChangePaymentTokenCall__Inputs(this);
  }

  get outputs(): ChangePaymentTokenCall__Outputs {
    return new ChangePaymentTokenCall__Outputs(this);
  }
}

export class ChangePaymentTokenCall__Inputs {
  _call: ChangePaymentTokenCall;

  constructor(call: ChangePaymentTokenCall) {
    this._call = call;
  }

  get _newPaymentToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangePaymentTokenCall__Outputs {
  _call: ChangePaymentTokenCall;

  constructor(call: ChangePaymentTokenCall) {
    this._call = call;
  }
}

export class ChangeSaleFrameCall extends ethereum.Call {
  get inputs(): ChangeSaleFrameCall__Inputs {
    return new ChangeSaleFrameCall__Inputs(this);
  }

  get outputs(): ChangeSaleFrameCall__Outputs {
    return new ChangeSaleFrameCall__Outputs(this);
  }
}

export class ChangeSaleFrameCall__Inputs {
  _call: ChangeSaleFrameCall;

  constructor(call: ChangeSaleFrameCall) {
    this._call = call;
  }

  get _newSaleFrame(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeSaleFrameCall__Outputs {
  _call: ChangeSaleFrameCall;

  constructor(call: ChangeSaleFrameCall) {
    this._call = call;
  }
}

export class ChangeSaleLimitCall extends ethereum.Call {
  get inputs(): ChangeSaleLimitCall__Inputs {
    return new ChangeSaleLimitCall__Inputs(this);
  }

  get outputs(): ChangeSaleLimitCall__Outputs {
    return new ChangeSaleLimitCall__Outputs(this);
  }
}

export class ChangeSaleLimitCall__Inputs {
  _call: ChangeSaleLimitCall;

  constructor(call: ChangeSaleLimitCall) {
    this._call = call;
  }

  get _newSaleLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeSaleLimitCall__Outputs {
  _call: ChangeSaleLimitCall;

  constructor(call: ChangeSaleLimitCall) {
    this._call = call;
  }
}

export class ChangeTargetContractCall extends ethereum.Call {
  get inputs(): ChangeTargetContractCall__Inputs {
    return new ChangeTargetContractCall__Inputs(this);
  }

  get outputs(): ChangeTargetContractCall__Outputs {
    return new ChangeTargetContractCall__Outputs(this);
  }
}

export class ChangeTargetContractCall__Inputs {
  _call: ChangeTargetContractCall;

  constructor(call: ChangeTargetContractCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _accessoriesContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeTargetContractCall__Outputs {
  _call: ChangeTargetContractCall;

  constructor(call: ChangeTargetContractCall) {
    this._call = call;
  }
}

export class ChangeTokenAddressDGCall extends ethereum.Call {
  get inputs(): ChangeTokenAddressDGCall__Inputs {
    return new ChangeTokenAddressDGCall__Inputs(this);
  }

  get outputs(): ChangeTokenAddressDGCall__Outputs {
    return new ChangeTokenAddressDGCall__Outputs(this);
  }
}

export class ChangeTokenAddressDGCall__Inputs {
  _call: ChangeTokenAddressDGCall;

  constructor(call: ChangeTokenAddressDGCall) {
    this._call = call;
  }

  get _newTokenAddressDG(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeTokenAddressDGCall__Outputs {
  _call: ChangeTokenAddressDGCall;

  constructor(call: ChangeTokenAddressDGCall) {
    this._call = call;
  }
}

export class ChangeTokenAddressICECall extends ethereum.Call {
  get inputs(): ChangeTokenAddressICECall__Inputs {
    return new ChangeTokenAddressICECall__Inputs(this);
  }

  get outputs(): ChangeTokenAddressICECall__Outputs {
    return new ChangeTokenAddressICECall__Outputs(this);
  }
}

export class ChangeTokenAddressICECall__Inputs {
  _call: ChangeTokenAddressICECall;

  constructor(call: ChangeTokenAddressICECall) {
    this._call = call;
  }

  get _newTokenAddressICE(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeTokenAddressICECall__Outputs {
  _call: ChangeTokenAddressICECall;

  constructor(call: ChangeTokenAddressICECall) {
    this._call = call;
  }
}

export class DelegateTokenCall extends ethereum.Call {
  get inputs(): DelegateTokenCall__Inputs {
    return new DelegateTokenCall__Inputs(this);
  }

  get outputs(): DelegateTokenCall__Outputs {
    return new DelegateTokenCall__Outputs(this);
  }
}

export class DelegateTokenCall__Inputs {
  _call: DelegateTokenCall;

  constructor(call: DelegateTokenCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _delegateAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _delegatePercent(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DelegateTokenCall__Outputs {
  _call: DelegateTokenCall;

  constructor(call: DelegateTokenCall) {
    this._call = call;
  }
}

export class DisabledSaleLimitChangeCall extends ethereum.Call {
  get inputs(): DisabledSaleLimitChangeCall__Inputs {
    return new DisabledSaleLimitChangeCall__Inputs(this);
  }

  get outputs(): DisabledSaleLimitChangeCall__Outputs {
    return new DisabledSaleLimitChangeCall__Outputs(this);
  }
}

export class DisabledSaleLimitChangeCall__Inputs {
  _call: DisabledSaleLimitChangeCall;

  constructor(call: DisabledSaleLimitChangeCall) {
    this._call = call;
  }
}

export class DisabledSaleLimitChangeCall__Outputs {
  _call: DisabledSaleLimitChangeCall;

  constructor(call: DisabledSaleLimitChangeCall) {
    this._call = call;
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class GetSupplyCall extends ethereum.Call {
  get inputs(): GetSupplyCall__Inputs {
    return new GetSupplyCall__Inputs(this);
  }

  get outputs(): GetSupplyCall__Outputs {
    return new GetSupplyCall__Outputs(this);
  }
}

export class GetSupplyCall__Inputs {
  _call: GetSupplyCall;

  constructor(call: GetSupplyCall) {
    this._call = call;
  }

  get _itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _accessoriesContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GetSupplyCall__Outputs {
  _call: GetSupplyCall;

  constructor(call: GetSupplyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ManageLevelCall extends ethereum.Call {
  get inputs(): ManageLevelCall__Inputs {
    return new ManageLevelCall__Inputs(this);
  }

  get outputs(): ManageLevelCall__Outputs {
    return new ManageLevelCall__Outputs(this);
  }
}

export class ManageLevelCall__Inputs {
  _call: ManageLevelCall;

  constructor(call: ManageLevelCall) {
    this._call = call;
  }

  get _level(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _costAmountDG(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _moveAmountDG(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _costAmountICE(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _moveAmountICE(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _floorBonus(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _deltaBonus(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _isActive(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class ManageLevelCall__Outputs {
  _call: ManageLevelCall;

  constructor(call: ManageLevelCall) {
    this._call = call;
  }
}

export class MintTokenCall extends ethereum.Call {
  get inputs(): MintTokenCall__Inputs {
    return new MintTokenCall__Inputs(this);
  }

  get outputs(): MintTokenCall__Outputs {
    return new MintTokenCall__Outputs(this);
  }
}

export class MintTokenCall__Inputs {
  _call: MintTokenCall;

  constructor(call: MintTokenCall) {
    this._call = call;
  }

  get _itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minterAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MintTokenCall__Outputs {
  _call: MintTokenCall;

  constructor(call: MintTokenCall) {
    this._call = call;
  }
}

export class ReIceNFTCall extends ethereum.Call {
  get inputs(): ReIceNFTCall__Inputs {
    return new ReIceNFTCall__Inputs(this);
  }

  get outputs(): ReIceNFTCall__Outputs {
    return new ReIceNFTCall__Outputs(this);
  }
}

export class ReIceNFTCall__Inputs {
  _call: ReIceNFTCall;

  constructor(call: ReIceNFTCall) {
    this._call = call;
  }

  get _oldOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReIceNFTCall__Outputs {
  _call: ReIceNFTCall;

  constructor(call: ReIceNFTCall) {
    this._call = call;
  }
}

export class RemoveWorkerCall extends ethereum.Call {
  get inputs(): RemoveWorkerCall__Inputs {
    return new RemoveWorkerCall__Inputs(this);
  }

  get outputs(): RemoveWorkerCall__Outputs {
    return new RemoveWorkerCall__Outputs(this);
  }
}

export class RemoveWorkerCall__Inputs {
  _call: RemoveWorkerCall;

  constructor(call: RemoveWorkerCall) {
    this._call = call;
  }

  get _existingWorker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWorkerCall__Outputs {
  _call: RemoveWorkerCall;

  constructor(call: RemoveWorkerCall) {
    this._call = call;
  }
}

export class RemoveWorkerBulkCall extends ethereum.Call {
  get inputs(): RemoveWorkerBulkCall__Inputs {
    return new RemoveWorkerBulkCall__Inputs(this);
  }

  get outputs(): RemoveWorkerBulkCall__Outputs {
    return new RemoveWorkerBulkCall__Outputs(this);
  }
}

export class RemoveWorkerBulkCall__Inputs {
  _call: RemoveWorkerBulkCall;

  constructor(call: RemoveWorkerBulkCall) {
    this._call = call;
  }

  get _workerArray(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveWorkerBulkCall__Outputs {
  _call: RemoveWorkerBulkCall;

  constructor(call: RemoveWorkerBulkCall) {
    this._call = call;
  }
}

export class RequestUpgradeCall extends ethereum.Call {
  get inputs(): RequestUpgradeCall__Inputs {
    return new RequestUpgradeCall__Inputs(this);
  }

  get outputs(): RequestUpgradeCall__Outputs {
    return new RequestUpgradeCall__Outputs(this);
  }
}

export class RequestUpgradeCall__Inputs {
  _call: RequestUpgradeCall;

  constructor(call: RequestUpgradeCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestUpgradeCall__Outputs {
  _call: RequestUpgradeCall;

  constructor(call: RequestUpgradeCall) {
    this._call = call;
  }

  get requestIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ResolveUpgradeMintCall extends ethereum.Call {
  get inputs(): ResolveUpgradeMintCall__Inputs {
    return new ResolveUpgradeMintCall__Inputs(this);
  }

  get outputs(): ResolveUpgradeMintCall__Outputs {
    return new ResolveUpgradeMintCall__Outputs(this);
  }
}

export class ResolveUpgradeMintCall__Inputs {
  _call: ResolveUpgradeMintCall;

  constructor(call: ResolveUpgradeMintCall) {
    this._call = call;
  }

  get _requestIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _itemId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ResolveUpgradeMintCall__Outputs {
  _call: ResolveUpgradeMintCall;

  constructor(call: ResolveUpgradeMintCall) {
    this._call = call;
  }
}

export class ResolveUpgradeSendCall extends ethereum.Call {
  get inputs(): ResolveUpgradeSendCall__Inputs {
    return new ResolveUpgradeSendCall__Inputs(this);
  }

  get outputs(): ResolveUpgradeSendCall__Outputs {
    return new ResolveUpgradeSendCall__Outputs(this);
  }
}

export class ResolveUpgradeSendCall__Inputs {
  _call: ResolveUpgradeSendCall;

  constructor(call: ResolveUpgradeSendCall) {
    this._call = call;
  }

  get _requestIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _newTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ResolveUpgradeSendCall__Outputs {
  _call: ResolveUpgradeSendCall;

  constructor(call: ResolveUpgradeSendCall) {
    this._call = call;
  }
}

export class SetCEOCall extends ethereum.Call {
  get inputs(): SetCEOCall__Inputs {
    return new SetCEOCall__Inputs(this);
  }

  get outputs(): SetCEOCall__Outputs {
    return new SetCEOCall__Outputs(this);
  }
}

export class SetCEOCall__Inputs {
  _call: SetCEOCall;

  constructor(call: SetCEOCall) {
    this._call = call;
  }

  get _newCEO(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCEOCall__Outputs {
  _call: SetCEOCall;

  constructor(call: SetCEOCall) {
    this._call = call;
  }
}
